name: scale-in-azure
on:
  repository_dispatch:
    types:
      - scale-in-azure

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    env:
     ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

    outputs:
      can_scale: ${{ steps.check_scale.outputs.can_scale }}
      desired_capacity: ${{ steps.test.outputs.new_count }}
      student_id: ${{ steps.client_payload_data.outputs.student_id }}
      current_count: ${{ steps.student_data.outputs.bigip_instance_count }}
      scaling_direction: ${{ github.event.client_payload.scaling_direction }}
    steps:

      - name: initialize can_scale variable
        run: echo ::set-output name=can_scale::'false'

      - name: Checkout
        uses: actions/checkout@v2

      - name: output webhook payload
        run: echo "The source of the webhook is = ${{ github.event.client_payload }}"

      # - name: enable actions command processing
      #   run: echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"

      - name: parse client payload data for scaling
        id: client_payload_data
        run: |
          echo ::set-output name=student_id::${{ github.event.client_payload.student_id }}

      - name: output student number
        run: echo "This is the student number ${{ steps.client_payload_data.outputs.student_id }}"

      - name: install consul client
        run: sudo sh scripts/consul.sh

      - name: get consul server parameters
        id: consul_params
        run: echo ::set-output name=consul_server::$(cat configs/consul_server.cfg)

      - name: query bigip scaling min/max values
        id: bigip_scaling
        run: |
          echo ::set-output name=bigip_min::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/bigip/min)
          echo ::set-output name=bigip_max::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/bigip/max)

      - name: output min and max values
        run: |
          echo "This is BIG-IP minimum scaling value = ${{ steps.bigip_scaling.outputs.bigip_min }}"
          echo "This is BIG-IP maximum scaling value = ${{ steps.bigip_scaling.outputs.bigip_max }}"

      - name: query student data
        id: student_data
        run: echo ::set-output name=bigip_instance_count::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/current_count)

      - name: output student data
        run: echo "The current BIG-IP instance count for student ${{ steps.client_payload_data.outputs.student_id }} is ${{ steps.student_data.outputs.bigip_instance_count }}"

      - name: calculate difference
        id: delta
        run: |
          echo ::set-output name=scale-in::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} - ${{ steps.bigip_scaling.outputs.bigip_min }})
          echo ::set-output name=scale-out::$(expr ${{ steps.bigip_scaling.outputs.bigip_max }} - ${{ steps.student_data.outputs.bigip_instance_count }} + 1 )

      - name: output deltas
        run: |
          echo "this is the scale in value = ${{ steps.delta.outputs.scale-in }}"
          echo "this is the scale out value = ${{ steps.delta.outputs.scale-out }}"

      - name: check if can scale in
        id: check_scale 
        if: steps.delta.outputs.scale-in > 0 || steps.delta.outputs.scale-out > 0
        run: |
          echo ::set-output name=can_scale::'true'
          echo "CAN SCALE IN or OUT!"
      
      - name: use env
        id: test
        env: 
          DIRECTION: "${{ github.event.client_payload.scaling_direction }}"
        run: |
          echo $DIRECTION
          echo ::set-output name=can_scale::'false'
          if [[ $DIRECTION = 'in' ] && ${{ steps.delta.outputs.scale-in }} > 0 ]; then
            echo "::set-env name=direction::in"
            echo "DIRECTION IS IN"
            echo "::set-output name=new_count::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} - 1)"
            echo ::set-output name=can_scale::'true'
          else
            echo "::set-env name=direction::out"
            echo "::set-output name=direction::out"
            echo "DIRECTION IS OUT"
            echo "::set-output name=new_count::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} + 1)"
          fi

      - name: output direction environment variable
        run: |
          echo "this is the direction env value ${{ env.direction }}"
          echo "this is the direction output value ${{ steps.test.outputs.direction }}"
          echo "this is the new instance count = ${{ steps.test.outputs.new_count }}"


      - name: can't scale
        if: steps.check_scale.outputs.can_scale != 'true'
        run: echo "CANNOT scale to the desired capacity" 

  scale:
    if: needs.build.outputs.can_scale == 'true'
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: output environment variable
        run: |
          echo "This is the can_scale variable from build step = ${{ needs.build.outputs.can_scale }}"
          echo "This is the desired_capacity variable from build step = ${{ needs.build.outputs.desired_capacity }}"
          echo "this is the student number = ${{ needs.build.outputs.student_id }}"
          echo "this is the scaling_type = ${{ needs.build.outputs.scaling_direction }}"
          echo "this is the current count = ${{ needs.build.outputs.current_count }}"
      
      - name: scaling in 
        if: needs.build.outputs.scaling_direction == 'in'
        run: echo "scaling in" 

      - name: scaling out
        if: needs.build.outputs.scaling_direction == 'out'
        run: echo "scaling out"

      # - name: login to azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDS }}

      - name: run azure command
        run: az account list

      # - name: output github secret info
      #   id: secret_info
      #   run: echo ::set-output name=azure_data::$(echo {{ secrets.AZURE_CREDS }})

      # - name: show secret secret_info
      #   run: echo "${{ secrets.AZURE_CREDS }}"

      - name: initialize terraform environment
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.3

      - name: output terraform version
        run: terraform version

      - name: process template file using jinja2
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: ./terraform-automation/deploy/main.tpl
          output_file: ./terraform-automation/deploy/main.tf
          variables: |
            client_id=${{ secrets.AZURE_CLIENT_ID }}
            subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
            tenant_id=${{ secrets.AZURE_TENANT_ID }}
            client_secret=${{ secrets.AZURE_CLIENT_SECRET }}
      
      # - name: install azure cli client
      #   run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # - name: terraform init initialize azure
      #   run: |
      #     cd ./terraform-automation/azure_rm
      #     terraform init

      # - name: terraform plan initialize azure
      #   run: |
      #     cd ./terraform-automation/azure_rm
      #     terraform plan

      # - name: terraform apply initialize azure
      #   run: |
      #     cd ./terraform-automation/azure_rm
      #     terraform apply --auto-approve      

      - name: terraform init state_setup
        run: |
          cd ./terraform-automation/state_setup
          terraform init
      
      - name: terraform plan state_setup
        run: |
          cd ./terraform-automation/state_setup
          terraform plan -var 'instance_count=${{ needs.build.outputs.desired_capacity }}' -var 'student_id=${{ needs.build.outputs.student_id }}' 
       
      - name: terraform apply state_setup
        run: |
          cd ./terraform-automation/state_setup
          terraform apply --auto-approve -var 'instance_count=${{ needs.build.outputs.desired_capacity }}' -var 'student_id=${{ needs.build.outputs.student_id }}' 
    
      - name: terraform init deploy
        run: |
          cd ./terraform-automation/deploy
          terraform init 
      
      - name: terraform plan deploy
        run: |
          cd ./terraform-automation/deploy
          terraform plan 
       
      - name: terraform apply deploy
        run: |
          cd ./terraform-automation/deploy
          terraform apply --auto-approve 
