name: scale-azure
on:
  repository_dispatch:
    types:
      - scale-azure

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    env:
     ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

    outputs:
      can_scale: ${{ steps.test.outputs.can_scale }}
      app_count: ${{ steps.test.outputs.app_count }}
      bigip_count: ${{ steps.test.outputs.bigip_count }}
      student_id: ${{ steps.client_payload_data.outputs.student_id }}
      current_count: ${{ steps.student_data.outputs.bigip_instance_count }}
      scaling: ${{ github.event.client_payload.scaling_direction }}
      consul_server: ${{ steps.consul_params.outputs.consul_server }}
    steps:

      - name: grab current time
        id: current_time
        run: echo ::set-output name=current_time::$(date +%s)
      
      - name: show current time
        run: |
          echo "The current time in seconds is = ${{ steps.current_time.outputs.current_time }}"
          echo "The current time in date format is = `date -d ${{ steps.current_time.outputs.current_time }}`"
      
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: output webhook payload
        run: echo "The source of the webhook is = ${{ github.event.client_payload }}"

      # - name: enable actions command processing
      #   run: echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"

      - name: parse client payload data for scaling
        id: client_payload_data
        run: |
          echo ::set-output name=student_id::${{ github.event.client_payload.student_id }}
          echo ::set-output name=app_name::${{ github.event.client_payload.app_name }}

      - name: output student id
        run: |
          echo "This is the student id from payload = ${{ github.event.client_payload.student_id }}"
          echo "This is the app name from payload = ${{ github.event.client_payload.app_name }}"

      - name: install consul client
        run: sudo sh scripts/consul.sh 

      - name: get consul server parameters
        id: consul_params
        run: |
          echo ::set-output name=consul_server::$(cat configs/consul_server.cfg)
          echo ::set-env name=CONSUL_HTTP_TOKEN::${{ secrets.CONSUL_HTTP_TOKEN }}
      
      - name: check scaling interval
        id: last_modified
        run: |
          echo ::set-output name=bigip_last_modified::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/last_modified_timestamp)
          echo ::set-output name=app_last_modified::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/last_modified_timestamp)

      - name: check interval
        id: check_interval
        run: |
          echo ::set-output name=app_scaling_delta::$(expr date -d ${{ steps.last_modified.outputs.app_last_modified_time }} +%s - date +%s)

      - name: show scaling deltas
        run: echo "App scaling delta in seconds is = ${{ steps.check_interval.outputs.app_scaling_delta }}"

      - name: check if another running already
        id: check_running
        run: |
          if [[ "${{ github.event.client_payload.scaling_type }}" == "bigip" ]]; then
            echo ::set-output name=is_running::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/is_running)
            echo "BIGIP SCALING"  
          elif [[ "${{ github.event.client_payload.scaling_type }}" == "app" ]]; then
            echo ::set-output name=is_running::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/is_running)
            echo "APP SCALING"
          else
            echo "SCALING TYPE NOT SET!!!"
          fi


      - name: do we run?
        run: |
          if [[ "${{ steps.check_running.outputs.is_running }}" == "true" ]]; then
            echo "WE ARE ABORTING BECAUSE ANOTHER RUNNING"
            exit 1
          else
            consul kv put -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/is_running true           
            echo "Good to go!"
          fi


      - name: query bigip scaling min/max values
        id: query_scaling
        run: |
          echo ::set-output name=bigip_min::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/bigip/min)
          echo ::set-output name=bigip_max::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/bigip/max)
          echo ::set-output name=app_min::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/apps/min)
          echo ::set-output name=app_max::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/apps/max)

      - name: output min and max values
        run: |
          echo "This is BIG-IP minimum scaling value = ${{ steps.query_scaling.outputs.bigip_min }}"
          echo "This is BIG-IP maximum scaling value = ${{ steps.query_scaling.outputs.bigip_max }}"
          echo "This is app minimum scaling value = ${{ steps.query_scaling.outputs.app_min }}"
          echo "This is app maximum scaling value = ${{ steps.query_scaling.outputs.app_max }}"

      - name: query student data
        id: student_data
        run: |
          echo ::set-output name=bigip_instance_count::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/current_count)
          echo ::set-output name=app_instance_count::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/current_count)

      - name: output student data
        run: |
          echo "The current BIG-IP instance count for student ${{ steps.client_payload_data.outputs.student_id }} is ${{ steps.student_data.outputs.bigip_instance_count }}"
          echo "The current app instance count for student ${{ steps.client_payload_data.outputs.student_id }} is ${{ steps.student_data.outputs.app_instance_count }}"

      - name: calculate difference
        id: delta
        run: |
          echo ::set-output name=bigip-scale-in::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} - ${{ steps.query_scaling.outputs.bigip_min }})
          echo ::set-output name=bigip-scale-out::$(expr ${{ steps.query_scaling.outputs.bigip_max }} - ${{ steps.student_data.outputs.bigip_instance_count }} + 1 )
          echo ::set-output name=app-scale-in::$(expr ${{ steps.student_data.outputs.app_instance_count }} - ${{ steps.query_scaling.outputs.app_min }})
          echo ::set-output name=app-scale-out::$(expr ${{ steps.query_scaling.outputs.app_max }} - ${{ steps.student_data.outputs.app_instance_count }} + 1 )

      - name: output deltas
        run: |
          echo "this is the scale in value for BIGIP = ${{ steps.delta.outputs.bigip-scale-in }}"
          echo "this is the scale out value for BIGIP = ${{ steps.delta.outputs.bigip-scale-out }}"
          echo "this is the scale in value for app = ${{ steps.delta.outputs.app-scale-in }}"
          echo "this is the scale out value for app = ${{ steps.delta.outputs.app-scale-out }}"


      # - name: check if can scale in
      #   id: check_scale 
      #   if: steps.delta.outputs.scale-in > 0 || steps.delta.outputs.scale-out > 0
      #   run: |
      #     echo ::set-output name=can_scale::'true'
      #     echo "CAN SCALE IN or OUT!"
      
      - name: use env
        id: test
        env: 
          DIRECTION: "${{ github.event.client_payload.scaling_direction }}"
        run: |
          echo $DIRECTION
          echo ::set-output name=can_scale::'false'
          echo ::set-output name=bigip_count::${{ steps.student_data.outputs.bigip_instance_count }}
          echo ::set-output name=app_count::${{ steps.student_data.outputs.app_instance_count }}

          if [[ "${{ github.event.client_payload.scaling_type }}" == "bigip" ]]; then
            if [[ $DIRECTION == 'in' ]]  && [[ ${{ steps.delta.outputs.bigip-scale-in }} > 0 ]]; then
              echo "::set-env name=direction::in"
              echo "DIRECTION IS IN"
              echo "::set-output name=bigip_count::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} - 1)"
              echo ::set-output name=can_scale::'true'
            elif [[ $DIRECTION == 'out' ]]  && [[ ${{ steps.delta.outputs.bigip-scale-out }} > 0 ]]; then
              echo "::set-env name=direction::out"
              echo "::set-output name=direction::out"
              echo "DIRECTION IS OUT"
              echo "::set-output name=new_count::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} + 1)"
              echo ::set-output name=can_scale::'true'
            fi
          elif [[ "${{ github.event.client_payload.scaling_type }}" == "app" ]]; then
            if [[ $DIRECTION == 'in' ]]  && [[ ${{ steps.delta.outputs.app-scale-in }} > 0 ]]; then
              echo "::set-env name=direction::in"
              echo "DIRECTION IS IN"
              echo "::set-output name=app_count::$(expr ${{ steps.student_data.outputs.app_instance_count }} - 1)"
              echo ::set-output name=can_scale::'true'
            elif [[ $DIRECTION == 'out' ]]  && [[ ${{ steps.delta.outputs.app-scale-out }} > 0 ]]; then
              echo "::set-env name=direction::out"
              echo "::set-output name=direction::out"
              echo "DIRECTION IS OUT"
              echo "::set-output name=app_count::$(expr ${{ steps.student_data.outputs.app_instance_count }} + 1)"
              echo ::set-output name=can_scale::'true'
            fi
          fi

      - name: output direction environment variable
        run: |
          echo "this is the direction env value ${{ env.direction }}"
          echo "this is the direction output value ${{ steps.test.outputs.direction }}"
          echo "this is the app instance count = ${{ steps.test.outputs.app_count }}"
          echo "this is the bigip instance count = ${{ steps.test.outputs.bigip_count }}"
          echo "this is the value of the can_scale variable = ${{ steps.test.outputs.can_scale }}"


      - name: can't scale
        if: steps.test.outputs.can_scale != 'true'
        run: echo "CANNOT scale to the desired capacity" 

  scale:
    if: needs.build.outputs.can_scale == 'true' && 0==1
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: output environment variable
        run: |
          echo "This is the can_scale variable from build step = ${{ needs.build.outputs.can_scale }}"
          echo "this is the app instance count = ${{ steps.test.outputs.app_count }}"
          echo "This is the app_count variable from build step = ${{ needs.build.outputs.app_count }}"
          echo "this is the student number = ${{ needs.build.outputs.student_id }}"
          echo "this is the scaling_type = ${{ needs.build.outputs.scaling }}"
          echo "this is the current count = ${{ needs.build.outputs.current_count }}"
      
      - name: scaling in 
        if: needs.build.outputs.scaling == 'in'
        run: echo "scaling in" 

      - name: scaling out
        if: needs.build.outputs.scaling == 'out'
        run: echo "scaling out"

      # - name: login to azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDS }}

      # - name: run azure command
      #   run: az account list

      # - name: output github secret info
      #   id: secret_info
      #   run: echo ::set-output name=azure_data::$(echo {{ secrets.AZURE_CREDS }})

      # - name: show secret secret_info
      #   run: echo "${{ secrets.AZURE_CREDS }}"

      - name: initialize terraform environment
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.3

      - name: output terraform version
        run: terraform version

      - name: process template file using jinja2
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: ./terraform-automation/deploy/main.tpl
          output_file: ./terraform-automation/deploy/main.tf
          variables: |
            client_id=${{ secrets.AZURE_CLIENT_ID }}
            subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
            tenant_id=${{ secrets.AZURE_TENANT_ID }}
            client_secret=${{ secrets.AZURE_CLIENT_SECRET }}
      
      # - name: install azure cli client
      #   run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      # - name: terraform init initialize azure
      #   run: |
      #     cd ./terraform-automation/azure_rm
      #     terraform init

      # - name: terraform plan initialize azure
      #   run: |
      #     cd ./terraform-automation/azure_rm
      #     terraform plan

      # - name: terraform apply initialize azure
      #   run: |
      #     cd ./terraform-automation/azure_rm
      #     terraform apply --auto-approve      

      - name: terraform init state_setup
        run: |
          cd ./terraform-automation/state_setup
          terraform init
      
      - name: terraform plan state_setup
        run: |
          cd ./terraform-automation/state_setup
          terraform plan -var 'instance_count=${{ needs.build.outputs.new_count }}' -var 'student_id=${{ needs.build.outputs.student_id }}' 
       
      - name: terraform apply state_setup
        run: |
          cd ./terraform-automation/state_setup
          terraform apply --auto-approve -var 'instance_count=${{ needs.build.outputs.new_count }}' -var 'student_id=${{ needs.build.outputs.student_id }}' 
    
      - name: terraform init deploy
        run: |
          cd ./terraform-automation/deploy
          terraform init 
      
      - name: terraform plan deploy
        run: |
          cd ./terraform-automation/deploy
          terraform plan 
       
      - name: terraform apply deploy
        run: |
          cd ./terraform-automation/deploy
          terraform apply --auto-approve 
      
      - name: install consul client
        run: sudo sh scripts/consul.sh

      - name: update time on k/v store
        run: echo `date +"%Y%m%d.%H%M%S%2N"` | consul kv put -http-addr=${{ needs.build.outputs.consul_server }} adpm/labs/agility/students/${{ needs.build.outputs.student_id }}/scaling/bigip/last_modified_time -

  reset_run_flag:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: install consul client
        run: sudo sh scripts/consul.sh

      - name: reset run flag
        run: |
          consul kv put -http-addr=${{ needs.build.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/is_running false
