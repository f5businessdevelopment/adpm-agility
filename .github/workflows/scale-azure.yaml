name: scale-azure
on:
  repository_dispatch:
    types:
      - scale-azure
jobs:
  setup:
    name: setup
    runs-on: ubuntu-latest
    env:
     ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

    outputs:
      can_scale: ${{ steps.test.outputs.can_scale }}
      app_count: ${{ steps.test.outputs.app_count }}
      bigip_count: ${{ steps.test.outputs.bigip_count }}
      student_id: ${{ steps.client_payload_data.outputs.student_id }}
      current_count: ${{ steps.student_data.outputs.bigip_instance_count }}
      scaling_direction: ${{ github.event.client_payload.scaling_direction }}
      consul_server: ${{ steps.consul_params.outputs.consul_server }}
      we_set_running: ${{ steps.check_running.outputs.we_set_running }}
    steps:

      - name: grab current time
        id: current_time_seconds
        run: echo ::set-output name=current_time_seconds::$(date +%s)
      
      - name: show current time
        run: |
          echo "The current time in seconds is = ${{ steps.current_time_seconds.outputs.current_time_seconds }}"
          echo "The current time in date format is = `date --date="@${{ steps.current_time_seconds.outputs.current_time_seconds }}"`"
            
      - name: Checkout
        uses: actions/checkout@v2
  
      - name: output webhook payload
        run: |
          echo "The source of the webhook is = ${{ github.event.client_payload.webhook_source }}"
          echo "The student id from the webhook is = ${{ github.event.client_payload.student_id}}"
          echo "The scaling direction from webhook is = ${{ github.event.client_payload.scaling_direction }}"
          echo "The scaling type from webhook is = ${{ github.event.client_payload.scaling_type }}"
          echo "The app name from the webhook is = ${{ github.event.client_payload.app_name }}"

      # - name: enable actions command processing
      #   run: echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"

      - name: parse client payload data for scaling
        id: client_payload_data
        run: |
          echo ::set-output name=student_id::${{ github.event.client_payload.student_id }}
          echo ::set-output name=app_name::${{ github.event.client_payload.app_name }}

      - name: install consul client
        run: sudo sh scripts/consul.sh 

      - name: get consul server parameters
        id: consul_params
        run: |
          echo ::set-output name=consul_server::$(cat configs/consul_server.cfg)
          echo ::set-env name=CONSUL_HTTP_TOKEN::${{ secrets.CONSUL_HTTP_TOKEN }}
      
      - name: check scaling interval
        id: last_modified
        run: |
          echo ::set-output name=bigip_last_modified_time::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/last_modified_timestamp)
          echo ::set-output name=app_last_modified_time::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/last_modified_timestamp)

      - name: output last modified times
        id: seconds
        run: |
          echo "BIGIP last modified time = ${{ steps.last_modified.outputs.bigip_last_modified_time }}"
          echo "App last modified time = ${{ steps.last_modified.outputs.app_last_modified_time }}"
          echo ::set-output name=bigip_modified_seconds::$(date --date="${{ steps.last_modified.outputs.bigip_last_modified_time }}" +%s)
          echo ::set-output name=app_modified_seconds::$(date --date="${{ steps.last_modified.outputs.app_last_modified_time }}" +%s)

      - name: output time seconds
        run: |
          echo "This is the BIGIP modified time in seconds = ${{ steps.seconds.outputs.bigip_modified_seconds }}"
          echo "This is the App modified time in seconds = ${{ steps.seconds.outputs.app_modified_seconds }}"

      - name: check interval
        id: check_interval
        run: |
          echo ::set-output name=app_scaling_delta::$(expr ${{ steps.current_time_seconds.outputs.current_time_seconds }} - ${{ steps.seconds.outputs.app_modified_seconds }})

      - name: show scaling deltas
        run: echo "App scaling delta in seconds is = ${{ steps.check_interval.outputs.app_scaling_delta }}"

      - name: check if another running already
        id: get_is_running
        run: |
          if [[ "${{ github.event.client_payload.scaling_type }}" == "bigip" ]]; then
            echo ::set-output name=is_running::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/is_running)
            echo "BIGIP SCALING"  
          elif [[ "${{ github.event.client_payload.scaling_type }}" == "app" ]]; then
            echo ::set-output name=is_running::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/is_running)
            echo "APP SCALING"
          else
            echo "SCALING TYPE NOT SET!!!"
          fi


      - name: do we run?
        id: check_running
        run: |
          if [[ "${{ steps.get_is_running.outputs.is_running }}" == "true" ]]; then
            echo "WE ARE ABORTING BECAUSE ANOTHER RUNNING"
            exit 1
          else
            consul kv put -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/is_running true
            echo ::set-output name=we_set_running::'true'           
            echo "Good to go!"
          fi


      - name: query bigip scaling min/max values
        id: query_scaling
        run: |
          echo ::set-output name=bigip_min::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/bigip/min)
          echo ::set-output name=bigip_max::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/bigip/max)
          echo ::set-output name=app_min::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/apps/min)
          echo ::set-output name=app_max::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/common/scaling/apps/max)

      - name: output min and max values
        run: |
          echo "This is BIG-IP minimum scaling value = ${{ steps.query_scaling.outputs.bigip_min }}"
          echo "This is BIG-IP maximum scaling value = ${{ steps.query_scaling.outputs.bigip_max }}"
          echo "This is app minimum scaling value = ${{ steps.query_scaling.outputs.app_min }}"
          echo "This is app maximum scaling value = ${{ steps.query_scaling.outputs.app_max }}"

      - name: query student data
        id: student_data
        run: |
          echo ::set-output name=bigip_instance_count::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/bigip/current_count)
          echo ::set-output name=app_instance_count::$(consul kv get -http-addr=${{ steps.consul_params.outputs.consul_server }} adpm/labs/agility/students/${{ steps.client_payload_data.outputs.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/current_count)

      - name: output student data
        run: |
          echo "The current BIG-IP instance count for student ${{ steps.client_payload_data.outputs.student_id }} is ${{ steps.student_data.outputs.bigip_instance_count }}"
          echo "The current app instance count for student ${{ steps.client_payload_data.outputs.student_id }} is ${{ steps.student_data.outputs.app_instance_count }}"

      - name: calculate difference
        id: delta
        run: |
          echo ::set-output name=bigip-scale-down::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} - ${{ steps.query_scaling.outputs.bigip_min }})
          echo ::set-output name=bigip-scale-up::$(expr ${{ steps.query_scaling.outputs.bigip_max }} - ${{ steps.student_data.outputs.bigip_instance_count }} + 1 )
          echo ::set-output name=app-scale-down::$(expr ${{ steps.student_data.outputs.app_instance_count }} - ${{ steps.query_scaling.outputs.app_min }})
          echo ::set-output name=app-scale-up::$(expr ${{ steps.student_data.outputs.app_instance_count }} + 1 )

      - name: output deltas
        run: |
          echo "this is the scale in value for BIGIP = ${{ steps.delta.outputs.bigip-scale-down }}"
          echo "this is the scale out value for BIGIP = ${{ steps.delta.outputs.bigip-scale-up }}"
          echo "this is the scale in value for app = ${{ steps.delta.outputs.app-scale-down }}"
          echo "this is the scale out value for app = ${{ steps.delta.outputs.app-scale-up }}"


      # - name: check if can scale in
      #   id: check_scale 
      #   if: steps.delta.outputs.scale-in > 0 || steps.delta.outputs.scale-out > 0
      #   run: |
      #     echo ::set-output name=can_scale::'true'
      #     echo "CAN SCALE IN or OUT!"
      
      - name: use env
        id: test
        env: 
          DIRECTION: "${{ github.event.client_payload.scaling_direction }}"
        run: |
          echo $DIRECTION
          echo ::set-output name=can_scale::'false'
          echo ::set-output name=bigip_count::${{ steps.student_data.outputs.bigip_instance_count }}
          echo ::set-output name=app_count::${{ steps.student_data.outputs.app_instance_count }}

          if [[ "${{ github.event.client_payload.scaling_type }}" == "bigip" ]]; then
            if [[ $DIRECTION == 'down' ]]  && [[ ${{ steps.delta.outputs.bigip-scale-down }} > 0 ]]; then
              echo "::set-env name=direction::down"
              echo "DIRECTION IS IN"
              echo "::set-output name=bigip_count::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} - 1)"
              echo ::set-output name=can_scale::'true'
            elif [[ $DIRECTION == 'up' ]]  && [[ ${{ steps.delta.outputs.bigip-scale-up }} > 0 ]]; then
              echo "::set-env name=direction::up"
              echo "::set-output name=direction::up"
              echo "DIRECTION IS UP"
              echo "::set-output name=new_count::$(expr ${{ steps.student_data.outputs.bigip_instance_count }} + 1)"
              echo ::set-output name=can_scale::'true'
            fi
          elif [[ "${{ github.event.client_payload.scaling_type }}" == "app" ]]; then
            if [[ $DIRECTION == 'down' ]]  && [[ ${{ steps.delta.outputs.app-scale-down }} > 0 ]]; then
              echo "::set-env name=direction::down"
              echo "DIRECTION IS DOWN"
              echo "::set-output name=app_count::$(expr ${{ steps.student_data.outputs.app_instance_count }} - 1)"
              echo ::set-output name=can_scale::'true'
            elif [[ $DIRECTION == 'up' ]]  && [[ expr(${{ steps.delta.outputs.app-scale-up }} <= ${{ steps.query_scaling.outputs.app_max }}) ]]; then
              echo "::set-env name=direction::up"
              echo "::set-output name=direction::up"
              echo "DIRECTION IS UP"
              echo "::set-output name=app_count::$(expr ${{ steps.student_data.outputs.app_instance_count }} + 1)"
              echo ::set-output name=can_scale::'true'
            fi
          fi

      - name: output direction environment variable
        run: |
          echo "this is the direction env value ${{ env.direction }}"
          echo "this is the direction output value ${{ steps.test.outputs.direction }}"
          echo "this is the app instance count = ${{ steps.test.outputs.app_count }}"
          echo "this is the bigip instance count = ${{ steps.test.outputs.bigip_count }}"
          echo "this is the value of the can_scale variable = ${{ steps.test.outputs.can_scale }}"


      - name: can't scale
        if: steps.test.outputs.can_scale != 'true'
        run: echo "CANNOT scale to the desired capacity" 

  scale:
    if: needs.setup.outputs.can_scale == 'true'
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: output environment variable
        run: |
          echo "This is the can_scale variable from build step = ${{ needs.setup.outputs.can_scale }}"
          echo "this is the app instance count = ${{ steps.test.outputs.app_count }}"
          echo "This is the app_count variable from build step = ${{ needs.setup.outputs.app_count }}"
          echo "This is the bigip_count variable from build step = ${{ needs.setup.outputs.bigip_count }}"
          echo "this is the student number = ${{ needs.setup.outputs.student_id }}"
          echo "this is the scaling_type = ${{ needs.setup.outputs.scaling_type }}"
          echo "this is the current count = ${{ needs.setup.outputs.current_count }}"
      
      - name: scaling down
        if: needs.setup.outputs.scaling_direction == 'down'
        run: echo "SCALING DOWN" 

      - name: scaling up
        if: needs.setup.outputs.scaling_direction == 'up'
        run: echo "SCALING UP"

      - name: login to azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDS }}

      - name: run azure command
        run: az account list

      # - name: output github secret info
      #   id: secret_info
      #   run: echo ::set-output name=azure_data::$(echo {{ secrets.AZURE_CREDS }})

      # - name: show secret secret_info
      #   run: echo "${{ secrets.AZURE_CREDS }}"

      - name: initialize terraform environment
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.3

      - name: output terraform version
        run: terraform version
    
      
      - name: set azure creds environment variables
        run: |
          echo ::set-env name=ARM_CLIENT_ID::${{ secrets.AZURE_CLIENT_ID }}
          echo ::set-env name=ARM_CLIENT_SECRET::${{ secrets.AZURE_CLIENT_SECRET }}
          echo ::set-env name=ARM_SUBSCRIPTION_ID::${{ secrets.AZURE_SUBSCRIPTION_ID }}
          echo ::set-env name=ARM_TENANT_ID::${{ secrets.AZURE_TENANT_ID }}

      # - name: process template file using jinja2
      #   uses: cuchi/jinja2-action@v1.2.0
      #   with:
      #     template: ./workflow_automation/deploy/providers.tpl
      #     output_file: ./workflow_automation/deploy/providers.tf
      #     variables: |
      #       client_id=${{ secrets.AZURE_CLIENT_ID }}
      #       subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #       tenant_id=${{ secrets.AZURE_TENANT_ID }}
      #       client_secret=${{ secrets.AZURE_CLIENT_SECRET }}
      
      # - name: process template file using jinja2
      #   uses: cuchi/jinja2-action@v1.2.0
      #   with:
      #     template: ./workflow_automation/f5module/providers.tpl
      #     output_file: ./workflow_automation/f5module/providers.tf
      #     variables: |
      #       client_id=${{ secrets.AZURE_CLIENT_ID }}
      #       subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #       tenant_id=${{ secrets.AZURE_TENANT_ID }}
      #       client_secret=${{ secrets.AZURE_CLIENT_SECRET }}
      
      - name: terraform init state_setup
        run: |
          echo ::set-env name=CONSUL_HTTP_TOKEN::${{ secrets.CONSUL_HTTP_TOKEN }}
          cd ./workflow_automation/state_setup
          terraform init
      
      - name: terraform plan state_setup
        run: |
          cd ./workflow_automation/state_setup
          terraform plan -var 'bigip_count=${{ needs.setup.outputs.bigip_count }}' -var 'app_count=${{ needs.setup.outputs.app_count }}' -var 'student_id=${{ needs.setup.outputs.student_id }}' 
       
      - name: terraform apply state_setup
        run: |
          cd ./workflow_automation/state_setup
          terraform apply --auto-approve -var 'bigip_count=${{ needs.setup.outputs.bigip_count }}' -var 'app_count=${{ needs.setup.outputs.app_count }}' -var 'student_id=${{ needs.setup.outputs.student_id }}'  
    
      - name: terraform init deploy
        run: |
          cd ./workflow_automation/deploy
          terraform init 
      
      - name: terraform plan /deploy
        run: |
          cd ./workflow_automation/deploy
          terraform plan
       
      - name: terraform apply /deploy
        run: |
          cd ./workflow_automation/deploy
          terraform apply --auto-approve 
      
      - name: install consul client
        run: sudo sh scripts/consul.sh

      - name: update time & count on k/v store
        run: |
          if [[ "${{ github.event.client_payload.scaling_type }}" == "bigip" ]]; then
            echo `date '+%Y-%m-%d %H:%M:%S'` | consul kv put -http-addr=${{ needs.setup.outputs.consul_server }} adpm/labs/agility/students/${{ needs.setup.outputs.student_id }}/scaling/bigip/last_modified_timestamp -
            consul kv put -http-addr=${{ needs.setup.outputs.consul_server }} adpm/labs/agility/students/${{ needs.setup.outputs.student_id }}/scaling/bigip/current_count ${{ needs.setup.outputs.bigip_count }}
          else
            echo `date '+%Y-%m-%d %H:%M:%S'` | consul kv put -http-addr=${{ needs.setup.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/last_modified_timestamp -
            consul kv put -http-addr=${{ needs.setup.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/current_count ${{ needs.setup.outputs.app_count }}
          fi

  reset_run_flag:
    if: always()
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    needs: [setup, scale]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: install consul client
        run: |
          echo ::set-env name=CONSUL_HTTP_TOKEN::${{ secrets.CONSUL_HTTP_TOKEN }}
          sudo sh scripts/consul.sh

      - name: reset run flag
        run: |
          if [[ ${{ needs.setup.outputs.we_set_running == 'true' }} ]]; then
            if [[ "${{ github.event.client_payload.scaling_type }}" == "bigip" ]]; then
             consul kv put -http-addr=${{ needs.setup.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/bigip/is_running false
            else
              consul kv put -http-addr=${{ needs.setup.outputs.consul_server }} adpm/labs/agility/students/${{ github.event.client_payload.student_id }}/scaling/apps/${{ github.event.client_payload.app_name }}/is_running false
              echo "RESET RUNNING FLAG"
            fi
          fi

